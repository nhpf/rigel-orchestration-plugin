---
# Rigel Kubernetes Orchestration Plugin - Example Configuration
# Copy this file to Rigelfile and customize for your ROS project

vars:
  distro: "noetic"
  # Set your Docker image name and tag here
  base_image: "your-registry/your-ros-app:latest"

application:
  distro: "{{ vars.distro }}"

jobs:
  dockerfile:
    plugin: "rigel.plugins.core.DockerfilePlugin"
    with:
      compiler:
        name: "catkin_make"
      ros_image: "ros:{{ vars.distro }}-ros-core"
      command: "rostopic pub /hello std_msgs/String 'Hello from K8s' -r 1"
      apt:
        - net-tools

  build:
    plugin: "rigel.plugins.core.BuildXPlugin"
    with:
      image: "{{ vars.base_image }}"
      load: true  # Set to false and configure providers to push to registry
      push: false # Set to true to push to configured registry

  deploy_k8s:
    plugin: "src.plugin.OrchestrationPlugin"
    with:
      orchestration:
        # Deploy ROS master service automatically
        deploy_ros_master: true
        
        # Readiness probe configuration
        readiness:
          command: "/usr/local/bin/readiness_probe.sh"
        
        # Enable observability stack (optional)
        observability:
          enabled: true
        
        # Rolling update strategy
        rolling_update:
          strategy: "Rolling"
          max_surge: 1
          max_unavailable: 0
        
        # Distributed deployment (optional)
        distributed:
          enabled: false
          default_to_remote: true
          force_local_flag: false
        
        # Persistent storage configuration
        persistent_storage:
          volumes:
            - name: "logs-volume"
              size: "1Gi"
              storage_class: "standard"
        
        # Additional Kubernetes parameters
        additional_k8s_params:
          # ROS Master configuration
          ros_master:
            spec:
              template:
                spec:
                  containers:
                    - name: "ros-master-container"
                      image: "ros:{{ vars.distro }}-ros-core"
                      command: ["/ros_entrypoint.sh"]
                      args: ["roscore"]
          
          # Application configuration
          application:
            spec:
              template:
                spec:
                  containers:
                    - name: "ros-app"
                      image: "{{ vars.base_image }}"
                      command:
                        [
                          "/home/rigeluser/robot-entrypoint.sh",
                          "rostopic",
                          "pub",
                          "/hello",
                          "std_msgs/String",
                          "Hello from K8s",
                          "-r",
                          "1",
                        ]
                      readinessProbe:
                        exec:
                          command: ["/usr/local/bin/readiness_probe.sh"]
                        initialDelaySeconds: 10
                        periodSeconds: 5
                      env:
                        - name: CUSTOM_ENV
                          value: "PRODUCTION"
                        - name: APP_VERSION
                          value: "{{ vars.base_image | regex_replace('.*:', '') }}"
                        - name: ROS_MASTER_URI
                          value: "http://ros-master:11311"
                      ports:
                        - containerPort: 8080
                      volumeMounts:
                        - name: logs-volume
                          mountPath: /persistent_logs
                  volumes:
                    - name: logs-volume
                      persistentVolumeClaim:
                        claimName: logs-volume-pvc

  update_k8s:
    plugin: "src.plugin.OrchestrationPlugin"
    with:
      orchestration:
        rolling_update:
          strategy: "Rolling"
          max_surge: 1
          max_unavailable: 0
        readiness:
          command: "/usr/local/bin/readiness_probe.sh"

sequences:
  # Deploy from scratch
  demo:
    stages:
      - jobs: ["dockerfile", "build", "deploy_k8s"]
  
  # Update existing deployment
  update:
    stages:
      - jobs: ["dockerfile", "build", "update_k8s"]
